/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReactionList.java
 *
 * Created on 17-lug-2011, 11.23.30
 */
package it.freedomotic.plugins.gui;

import it.freedomotic.persistence.ReactionPersistence;
import it.freedomotic.persistence.TriggerPersistence;
import it.freedomotic.plugins.AutomationsEditor;
import it.freedomotic.reactions.Command;
import it.freedomotic.reactions.Reaction;
import it.freedomotic.reactions.Trigger;
import it.freedomotic.util.ReactionEditor;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author Enrico
 */
public final class ReactionList extends javax.swing.JFrame {

    private AutomationsEditor plugin;
    private JPanel panel = new JPanel();

    /**
     * Creates new form ReactionList
     */
    public ReactionList(AutomationsEditor plugin) {
        initComponents();
        this.plugin = plugin;

        JScrollPane scrollPane = new JScrollPane(panel);
        panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
        setPreferredSize(new Dimension(450, 110));
        add(scrollPane, BorderLayout.CENTER);
        JButton ok = new JButton("OK");
        ok.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                for (Component component : panel.getComponents()) {
                    if (component instanceof ReactionEditor) {
                        ReactionEditor editor = (ReactionEditor) component;
                        editor.finalizeEditing();
                    }
                }
                dispose();
            }
        });
        add(ok, BorderLayout.SOUTH);
        populateAutomations();
        this.pack();
    }

//    private void populateEditor(Reaction selected) {
//        JFrame frame = new JFrame("this is a test");
//        frame.setLayout(new BorderLayout());
//        ReactionEditor editor = new ReactionEditor(selected);
//        frame.setPreferredSize(new Dimension(400, 30));
//        frame.add(editor);
//        frame.setVisible(true);
//    }
    private void populateAutomations() {
        panel.removeAll();
        for (Trigger trigger : TriggerPersistence.getTriggers()) {
            if (!trigger.isHardwareLevel()) {
                //display already stored reactions related to this objects
                boolean found = false;
                for (Reaction r : ReactionPersistence.getReactions()) {
                    if (r.getTrigger().equals(trigger)) {
                        ReactionEditor editor = new ReactionEditor(r);
                        panel.add(editor);
                        found = true;
                    }
                }
                if (!found) {//add an empty reaction if none
                    ReactionEditor editor = new ReactionEditor(new Reaction(trigger));
                    panel.add(editor);
                }
            }
        }
        validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Current Automations");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        updateData();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        plugin.stop();
    }//GEN-LAST:event_formWindowClosing

    protected void updateData() {
//        DefaultListModel model = new DefaultListModel();
//        model.clear();
//        for (Reaction rea : ReactionPersistence.getReactions()) {
//            model.addElement(rea);
//        }
//        lstReactions.setModel(model);
//        lstReactions.addListSelectionListener(new ListSelectionListener() {
//            public void valueChanged(ListSelectionEvent e) {
//                Reaction selected = (Reaction) lstReactions.getSelectedValue();
//                if (selected != null) {
//                    //populateEditor(selected);
//                    btnDelete.setEnabled(true);
//                } else {
//                    btnDelete.setEnabled(false);
//                }
//            }
//        });
        populateAutomations();
    }

    protected void setTargetTrigger(Trigger t) {
    }

    protected void setTargetCommand(Command c) {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
