/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmTest2.java
 *
 * Created on 12-ago-2010, 11.33.11
 */

package it.freedom.X10.test;

import java.util.StringTokenizer;
import java.util.Vector;

/**
 *
 * @author roby
 */
public class frmTest2 extends javax.swing.JFrame {

    /** Creates new form frmTest2 */
    public frmTest2() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labInput = new javax.swing.JLabel();
        btnElabora = new javax.swing.JButton();
        txtInput = new javax.swing.JTextField();
        scrCoppie = new javax.swing.JScrollPane();
        lstCoppie = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labInput.setText("Input");

        btnElabora.setText("Elabora");
        btnElabora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElaboraActionPerformed(evt);
            }
        });

        txtInput.setText("A01 A01 A02 A02 B14 B14 AON AON ABGT ABGT");

        scrCoppie.setViewportView(lstCoppie);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrCoppie, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labInput)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtInput, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnElabora)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labInput)
                    .addComponent(btnElabora)
                    .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrCoppie, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnElaboraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElaboraActionPerformed
        StringTokenizer token = new StringTokenizer(txtInput.getText());
        String last = "";
        boolean isAddressing = false;

        while (token.hasMoreElements()) {
            String message = token.nextToken();
            if (message.compareToIgnoreCase(last)!=0) {
                last = message;
                continue;
            }

            if (isAddress(message)) {
                if (!isAddressing) resetAddress();
                isAddressing = true;
                addAddress(message);
            }

            if (isCommand(message)) {
                isAddressing = false;
                sendEvents(message);
            }
        }
    }//GEN-LAST:event_btnElaboraActionPerformed

    private boolean isAddress(String str) {
        str = str.toUpperCase();

        // Se sono più o meno di 3 caratteri
        if (str.length()!=3) return false;

        // Il primo carattere non è tra A e P
        char lettera = str.charAt(0);
        if (lettera<'A' || lettera>'P') return false;

        // Il 2° e 3° carattere non compongono un numero compreso tra 01 e 16
        try {
            int num = Integer.parseInt(str.substring(1,3));
            if (num<1 || num>16) return false;
        } catch (Exception e) { return false; }

        return true;

    }

    private boolean isCommand(String str) {
        str = str.toUpperCase();

        // Se sono più o meno di 3 o 4 caratteri
        if (str.length()<3 || str.length()>4) return false;

        // Il primo carattere non è tra A e P
        char lettera = str.charAt(0);
        if (lettera<'A' || lettera>'P') return false;

        // Il resto è un comando X10 valido
        str = str.substring(1);
        if (str.compareTo("ON")==0) return true;
        if (str.compareTo("OFF")==0) return true;
        if (str.compareTo("DIM")==0) return true;
        if (str.compareTo("BGT")==0) return true;
        if (str.compareTo("AUF")==0) return true;
        if (str.compareTo("ALN")==0) return true;
        if (str.compareTo("ALN")==0) return true;
        if (str.compareTo("HRQ")==0) return true;
        if (str.compareTo("HAK")==0) return true;
        if (str.compareTo("PRG")==0) return true;
        if (str.compareTo("SON")==0) return true;
        if (str.compareTo("SOF")==0) return true;
        if (str.compareTo("SRQ")==0) return true;

        return false;

    }
/*
All Units Off       spegni tutti i dispositivi con l'house code indicato nel messaggio
All Lights On       accendi tutti i dispositivi di illuminazione (con la possibilità di controllo di luminosità)
On                  accendi un dispositivo
Off                 spegni un dispositivo
Dim                 riduci l'intensità della luce
Bright              aumenta l'intensità della luce
Extended Code       codice d'estensione
Hail Request        richiedi una risposta da uno o più dispositivi con l'house code indicato nel messaggio
Hail Acknowledge    risposta al messaggio precedente
Pré-Set Dim         seleziona uno di due livelli di luminosità predefiniti
Status is On        risposta a Status Request che il dispositivo è acceso
Hail Acknowledge    risposta al messaggio precedente
Status is Off       risposta che il dispositivo è spento
Status Request      richiedi lo stato di un dispositivo
 *
 */
    private boolean isCommandAddressed(String cmd) {
        cmd = cmd.substring(1);
        if (cmd.compareTo("ON")==0) return true;
        if (cmd.compareTo("OFF")==0) return true;
        if (cmd.compareTo("DIM")==0) return true;
        if (cmd.compareTo("BGT")==0) return true;
        if (cmd.compareTo("AUF")==0) return false;
        if (cmd.compareTo("ALN")==0) return false;
        if (cmd.compareTo("ALN")==0) return false;
        if (cmd.compareTo("HRQ")==0) return true;
        if (cmd.compareTo("HAK")==0) return false;
        if (cmd.compareTo("PRG")==0) return true;
        if (cmd.compareTo("SON")==0) return true;
        if (cmd.compareTo("SOF")==0) return true;
        if (cmd.compareTo("SRQ")==0) return true;
        return false;
    }

        private Vector<String> _address = new Vector<String>();

    void addAddress(String add) {
        _address.add(add);
    }

    void resetAddress() {
        _address.removeAllElements();
    }

    void sendEvents(String cmd) {
        if (isCommandAddressed(cmd)) {
            for (int i=0; i<_address.size(); i++) {
                System.out.println(_address.get(i) + " - " + cmd);
            }
        } else {
            System.out.println(cmd);
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmTest2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnElabora;
    private javax.swing.JLabel labInput;
    private javax.swing.JList lstCoppie;
    private javax.swing.JScrollPane scrCoppie;
    private javax.swing.JTextField txtInput;
    // End of variables declaration//GEN-END:variables

}
