<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="freedomotic" default="default" basedir=".">
    <description>Builds, tests, and runs the project freedomotic.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:
    For list of available properties check the imported 
    nbproject/build-impl.xml file.  -->
    <target name="-create-changelog">
        <echo>Append changes to CHANGELOG file</echo>
        <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
            <classpath>
                <pathelement location="../../lib/ant/xmltask.jar"/>
            </classpath>
        </taskdef>
        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <pathelement location="../../lib/ant/ant-contrib-1.0b3.jar"/>
            </classpath>
        </taskdef>
        <property name="changes" value=""/> <!-- init variable to empty -->
        <property name="changelogFile" value="${release-dump}/CHANGELOG.TXT"/>
        <get src="http://localhost:8080/api/xml?depth=2&amp;xpath=//hudson/job/lastBuild/changeSet/item/msg" dest="${release-dump}/temp-changelog.xml"/>
        <get src="http://localhost:8080/api/xml?depth=2&amp;xpath=//hudson/job/lastBuild/changeSet/item/date" dest="${release-dump}/temp-timestamp.xml"/>
        <xmltask source="${release-dump}/temp-changelog.xml">
            <copy path="//msg/text()" property="changes"/>
        </xmltask> 
        <xmltask source="${release-dump}/temp-timestamp.xml">
            <copy path="//date/text()" property="timestamp"/>
        </xmltask> 
        <!--<if>
            <bool><startswith string="${changes}" with="CHANGELOG"/></bool>
            <then>-->
        <echo file="${changelogFile}" append="true">${line.separator}
            ---- freedomotic-${release.version}.${build.number} ----${line.separator}
            ${changes} ${line.separator}
            changed on ${timestamp} ${line.separator} 
        </echo> 
           <!-- </then>
        </if>
-->
    </target>
<!--
    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="freedomotic-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    
    <target name="create-release" >
        <!--
        Target that creates a package with all necesary to run freedomoticT        
        If a property plugin_list is used with the format:
        devices/frontend-java,devices/restapi
        the package will include the name of the plugins defined.
        -->
        <echo>Building release of Freedomotic</echo>
         <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <pathelement location="../../lib/ant/ant-contrib-1.0b3.jar"/>
            </classpath>
         </taskdef>        

        <!-- We check if the release.version has been given externally of we have to ask-->
        <input
            message="Please enter the release major number and minor number separated by a dot."
            addproperty="release.version"
            defaultvalue="5.5.0"
        />                
       	
        <property name="workspace-base" value="../../"/>
        <property name="release-base" value="${workspace-base}/release"/>
        <property name="release-folder" value="${release-base}/freedomotic"/>
        <property name="release-dump" value="${release-base}/temp"/>
        <property name="base" value="${basedir}"/>
        <property name="include" value="${workspace-base}/scripts/shared"/>
        <property name="changeLogFile" value="${include}/CHANGELOG.TXT"/>        


<!--    <property name="plugin_list" value="devices/frontend-java,devices/restapi"/> -->
        <!-- Compiles the plugins to be included on the package-->
        <if> 
            <isset property = "plugin_list"/> 
            <then>   
                <subant target="default">
                    <filelist dir="${workspace-base}/plugins" files="${plugin_list}"/>
                </subant>
            </then>
        </if>
          

        <buildnumber/>
        <mkdir dir="${release-folder}" />
        <mkdir dir="${release-dump}" />
		
        <!-- just to be sure it exists and is ready to be filled -->
        <mkdir dir="plugins/devices"/>
        <mkdir dir="plugins/objects"/>
        <mkdir dir="plugins/providers"/>
        <mkdir dir="plugins/events"/>
        <mkdir dir="data"/>
   
        <echo>  Add jar file and libraries</echo>
        <copy todir="${release-folder}">
            <fileset dir="dist" includes="**/*" /> 
        </copy>
        
        <echo>  Add plugins</echo>
        <copy todir="${release-folder}/plugins">
            <fileset dir="${base}/plugins" includes="**/*" />
        </copy>
        
        <echo>  Add config file</echo>
        <copy todir="${release-folder}/config">
            <fileset dir="${base}/config" includes="**/*" />
        </copy>
        
        <echo>  Add example data file</echo>
        <copy todir="${release-folder}/data">
            <fileset dir="${workspace-base}/data-example" includes="**/*" />
        </copy>
        
        <!--<echo>Append changes to CHANGELOG file</echo>	
        <antcall target="-create-changelog" />-->        

        <echo>  Add exe and changelog file and licensing info taken from shared folder</echo>
        <copy todir="${release-folder}">
            <fileset dir="${include}" includes="**/*" />
        </copy>
        
	
        <echo>  Creating logger directory</echo>
        <mkdir dir="${release-folder}/log" />
        
         <if> 
            <isset property = "generate_deb"/> 
            <then>                   
                <antcall target="generate-deb">            
                </antcall>
            </then>
        </if>
                   
        
        <echo>Compress the whole release folder</echo>
        <delete dir="${release-dump}" />
        <zip destfile="${workspace-base}/freedomotic-${release.version}.${build.number}.zip"        basedir="${release-base}"/>
        <propertyfile file="releasetoupload" comment="Properties used by Continuous Itegration server to upload the right version on GoogleCode">
            <entry  key="upload.release.major" value="${release.version}"/>
            <entry  key="upload.release.build" value="${build.number}"/>
            <entry  key="upload.file.name" value="freedomotic-${release.version}.${build.number}.zip"/>
        </propertyfile>
        <delete dir="${release-folder}" /> 
        <echo>FINISH... Release created. Now it is ready to be distributed.</echo>
    </target>
    
    <target name="upload-dailybuild" >
        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <pathelement location="../../lib/ant/ant-contrib-1.0b3.jar"/>
            </classpath>
        </taskdef>
        <property environment = "env"/>                
        <propertyregex property="vm.commit_sha" input="${env.GIT_COMMIT}" 
                        regexp="(\w{7})\w*" 
                        select="\1" 
                        defaultvalue="Error" 
                        override="true"/>                   
        <property name="workspace-base" value="../../"/>               
        <property file="${workspace-base}/framework/freedomotic/releasetoupload" />
        <taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" classpath="${workspace-base}/lib/ant/ant-googlecode-0.0.3.jar" name="gcupload"/>
        <gcupload 
            username="${username}"
            password="${password}"        
            projectname="freedomotic"
            filename="${workspace-base}/${upload.file.name}"
            targetfilename="freedomotic-dailybuild-${upload.release.major}.${env.BUILD_NUMBER}-${vm.commit_sha}.zip"        
            summary="Daily build created by a Continuous Integration System. This release is unstable, do not use in production environment."
            labels="Featured, Type-DailyBuild, OpSys-All"
            verbose="true"/>
    </target>
    
    <target name="upload-release" >
        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <pathelement location="../../lib/ant/ant-contrib-1.0b3.jar"/>
            </classpath>
        </taskdef>                        
        <property name="workspace-base" value="../../"/>               
        <property file="${workspace-base}/framework/freedomotic/releasetoupload" />
        <taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" classpath="${workspace-base}/lib/ant/ant-googlecode-0.0.3.jar" name="gcupload"/>
        <gcupload 
            username="${googlecode_username}"
            password="${googlecode_password}"        
            projectname="freedomotic"
            filename="${workspace-base}/${upload.file.name}"
            targetfilename="Freedomotic_v${upload.release.major}.zip"        
            summary="The currently RECOMMENDED version to download. You may try the latest daily build if you feel brave."
            labels="Featured, Type-Beta, OpSys-All"
            verbose="true"/>
            
        <if>
            <isset property = "plugin_list"/> 
            <then>   
                <subant target="upload">
                    <filelist dir="${workspace-base}/plugins" files="${plugin_list}"/>
                </subant>
            </then>
        </if>
 
    </target>
    <target name="generate-deb" >
    <echo>  Add debian folder for .deb creation</echo>
        <copy todir="${release-folder}/debian">
            <fileset dir="${workspace-base}/scripts/debian" includes="**/*" />
        </copy>    
  
        <echo>  Creating .deb package</echo>
	<exec executable="chmod" dir="${release-folder}" os="Linux">
		<arg value="a+x"/>
		<arg value="debian/rules"/>
	</exec>
	<exec executable="fakeroot" dir="${release-folder}" os="Linux"> 
		<arg value="debian/rules"/>
		<arg value="clean"/>
	</exec>
        <exec executable="fakeroot" dir="${release-folder}" os="Linux">
                <arg value="debian/rules"/>
                <arg value="binary"/>
        </exec>
	<echo>Moving .deb file </echo>
	<copy todir="$workspace-base}">
		<fileset dir="${release-base}" includes="**/*.deb" />
	</copy>
	<echo>Deleting debian folder before compressing</echo>
	<delete dir="${release-folder}/debian" />
     </target>
</project>
